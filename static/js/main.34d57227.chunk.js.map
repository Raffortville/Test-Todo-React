{"version":3,"sources":["store/actions/todoActions.js","utils.js","components/TodoForm.js","store/actions/index.js","store/reducers/todoReducer.js","components/TodoList.js","components/Alert.js","components/TodoHeader.js","App.js","store/reducers/index.js","index.js"],"names":["GET_TODOS","CURRENT_TODO","ADD_TODO","DELETE_TODO","SET_ALERT","UPDATE_TODO","SET_LOADING","getTodos","todos","type","payload","selectTodo","todo","addTodo","deleteTodo","id","updateTodo","setAlert","alert","isLoading","mode","fetchTodo","dispatch","a","axios","get","response","data","console","log","getTodoById","url","result","postTodo","message","post","deleteTodoById","delete","patchTodo","_id","patch","colors","value","label","deleteInfoMessage","severity","clearTodoListMessage","addSuccessAlert","errorAlert","updateSuccessAlert","TodoForm","props","useDispatch","currentTodo","useSelector","state","useState","setTodo","modeForm","modeFormName","setModeFormName","React","useEffect","handleChange","e","target","name","Box","mt","width","Card","className","elevation","CardContent","Typography","variant","display","flexDirection","TextField","onChange","color","margin","title","required","multiline","rows","description","select","helperText","map","option","MenuItem","justifyContent","style","backgroundColor","CardActions","Grid","container","justify","alignItems","Button","onClick","closeTodoForm","window","sessionStorage","setItem","size","IconButton","Icon","actions","todoActions","initialState","loading","TodoList","expanded","setExpand","item","md","length","Paper","index","Accordion","panel","event","isExpanded","AccordionSummary","expandIcon","AccordionDetails","component","Tooltip","handleModeForm","openTodoForm","forEach","startIcon","AlertMessage","setTimeout","Alert","TodoHeader","createModeForm","toggleTodoForm","setToggleTodoForm","setFormMode","handleToggleTodoForm","val","direction","mr","App","getItem","rootReducer","combineReducers","action","concat","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34d57227.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n//// declare actions ////\r\n\r\nexport const GET_TODOS = \"GET_TODOS\"\r\nexport const CURRENT_TODO = \"CURRENT_TODO\"\r\nexport const ADD_TODO = \"ADD_TODO\"\r\nexport const DELETE_TODO = \"DELETE_TODO\"\r\nexport const SET_ALERT = \"SET_ALERT\"\r\nexport const UPDATE_TODO = \"UPDATE_TODO\"\r\nexport const SET_LOADING = \"SET_LOADING\"\r\n\r\n\r\n//// defines actions function to connect the components React with Redux////\r\n\r\nexport const getTodos = (todos) => ({\r\n\r\n    type: GET_TODOS,\r\n    payload:todos\r\n})\r\n\r\nexport const selectTodo = (todo) => ({\r\n\r\n    type : CURRENT_TODO,\r\n    payload:todo\r\n})\r\n\r\nexport const addTodo = (todo) => ({\r\n\r\n    type:ADD_TODO,\r\n    payload:todo\r\n});\r\n\r\nexport const deleteTodo = (id) => ({\r\n\r\n    type:DELETE_TODO,\r\n    payload:id\r\n});\r\n\r\nexport const updateTodo = (todo) => ({\r\n\r\n    type:UPDATE_TODO,\r\n    payload:todo\r\n});\r\n\r\nexport const setAlert = (alert) => ({\r\n\r\n    type:SET_ALERT,\r\n    payload:alert\r\n});\r\n\r\nexport const isLoading = (mode) => ({\r\n\r\n    type:SET_LOADING,\r\n    payload:mode\r\n})\r\n\r\n\r\n///// API CALL  communicate with our DB API and our  react components //////\r\n\r\nexport const fetchTodo = () => async dispatch => {\r\n\r\n    const url = \"https://todo.eachbase.com/api/RaffiHaycan/todos\"\r\n\r\n        dispatch(isLoading(true))\r\n\r\n        try {\r\n\r\n            const response = await axios.get(url)\r\n\r\n            const data = await response.data\r\n\r\n            dispatch(getTodos(data))\r\n            dispatch(isLoading(false))\r\n\r\n        } catch (error) {console.log(error)}\r\n    \r\n}\r\n\r\nexport const getTodoById = (payload) => async dispatch => {\r\n\r\n   const url =  `https://todo.eachbase.com/api/RaffiHaycan/todos/${payload}`\r\n\r\n    try {\r\n\r\n        const response = await axios.get(url)\r\n\r\n        const result =  await response.data\r\n\r\n        dispatch(selectTodo(result))\r\n        \r\n    } catch (error) {console.log(error) }\r\n\r\n}\r\n\r\nexport const postTodo = (payload,message) => async dispatch => {\r\n\r\n    const url = \"https://todo.eachbase.com/api/RaffiHaycan/todos\"\r\n\r\n    try {\r\n\r\n       const response =  await axios.post(url,payload)\r\n\r\n       const result =  await response.data\r\n\r\n       dispatch(addTodo(result))\r\n       dispatch(setAlert(message))\r\n\r\n    } catch (error) {console.log(error)}\r\n\r\n}\r\n\r\nexport const deleteTodoById = (payload,message) => async dispatch => {\r\n\r\n    const url = `https://todo.eachbase.com/api/RaffiHaycan/todos/${payload}`;\r\n\r\n    dispatch(isLoading(true))\r\n\r\n    try {\r\n        await axios.delete(url,{data:payload})\r\n\r\n        dispatch(deleteTodo(payload))\r\n        dispatch(setAlert(message))\r\n\r\n        dispatch(isLoading(false))\r\n        \r\n    } catch (error) {console.log(error)}\r\n}\r\n\r\nexport const patchTodo = (payload,message) => async dispatch => {\r\n\r\n    const url = `https://todo.eachbase.com/api/RaffiHaycan/todos/${payload._id}`;\r\n\r\n    try {\r\n\r\n        const response = await axios.patch(url,payload)\r\n\r\n        const result = await response.data\r\n\r\n        dispatch(updateTodo(result))\r\n        dispatch(setAlert(message))\r\n\r\n    } catch (error) {console.log(error)}\r\n}\r\n\r\n","\r\nexport const colors = [\r\n    {\r\n      value: '#fbc25d',\r\n      label: 'orange',\r\n    },\r\n    {\r\n      value: '#fb5d5d',\r\n      label: 'fushia',\r\n    },\r\n    {\r\n      value: '#93fb5d',\r\n      label: 'green',\r\n    },\r\n    {\r\n      value: '#5da0fb',\r\n      label: 'blue',\r\n    },\r\n    {\r\n        value: '#dc5dfb',\r\n        label: 'purple',\r\n    },\r\n    {\r\n        value: '#b3c785',\r\n        label: 'beige',\r\n    }\r\n];\r\n\r\n\r\nexport const deleteInfoMessage = {message:\"task deleted with success\", severity:\"info\"}\r\n\r\nexport const clearTodoListMessage = {message:\"Todo list is cleaned up\", severity:\"info\"}\r\n\r\nexport const addSuccessAlert = {message:\"New task added with success !\", severity:\"success\"}\r\n\r\nexport const errorAlert = {message:\"Field is blank, please fill out it\",severity:\"error\"}\r\n\r\nexport const updateSuccessAlert = {message:\" task updated with success !\", severity:\"success\"}","import React,{useState} from 'react'\r\nimport {Card, CardContent,Typography,CardActions,Button,Box,TextField,IconButton,Grid,MenuItem} from '@material-ui/core'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {patchTodo, postTodo,setAlert} from '../store/actions/todoActions'\r\n//// IMPORT ALL CONST & AND UTILS FUNCTIONS FROM \"utils.js\" files /////\r\nimport {addSuccessAlert,updateSuccessAlert,errorAlert,colors} from '../utils'\r\n\r\n\r\nconst TodoForm = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const currentTodo = useSelector(state => state.todos.currentTodo)\r\n\r\n    const [todo,setTodo] = useState(currentTodo)\r\n\r\n    const [modeFormName,setModeFormName] = useState(props.modeForm)\r\n\r\n\r\n    ///// Hooks for reactivity and switch between mode Edit or Create and Populate the form ///////\r\n\r\n    React.useEffect(() => {\r\n\r\n        setTodo(currentTodo)\r\n\r\n        setModeFormName(props.modeForm)\r\n\r\n    },[setTodo,currentTodo,setModeFormName,props.modeForm])\r\n\r\n    const handleChange = (e) => {\r\n\r\n        const {value,name} = e.target\r\n\r\n        setTodo({...todo,[name]:value})\r\n    }\r\n\r\n    //// function determines if the Submit is an Update or Create todo ////\r\n    \r\n    const handleSubmit = () => {\r\n\r\n        if(todo.title === \"\" || todo.description === \"\" || todo.color === \"\"){\r\n\r\n            dispatch(setAlert(errorAlert))\r\n\r\n        } else {\r\n            \r\n            modeFormName === \"Create\" ?  dispatch(postTodo(todo,addSuccessAlert)) : dispatch(patchTodo(todo,updateSuccessAlert))\r\n            \r\n            props.closeTodoForm()\r\n            window.sessionStorage.setItem('open','true')\r\n        }\r\n    }\r\n\r\n    const handleCancel = () => setTodo(currentTodo)\r\n\r\n    return(\r\n\r\n        <Box mt={2} width=\"90%\">\r\n            <Card className=\"backGroundCard\" elevation={4}>\r\n                <CardContent>\r\n                    <Box>\r\n                        <Typography variant=\"h4\" className=\"subTitle1\" >{modeFormName} your task</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" flexDirection=\"column\">\r\n                        <TextField \r\n                            onChange={handleChange}\r\n                            color=\"secondary\" \r\n                            margin=\"dense\" \r\n                            label=\"Title\"\r\n                            name=\"title\"\r\n                            value={todo.title}\r\n                            required\r\n                            />\r\n                        <TextField\r\n                            onChange={handleChange}\r\n                            color=\"secondary\"\r\n                            id=\"filled-multiline-static\"\r\n                            label=\"Description\"\r\n                            multiline\r\n                            rows={1}\r\n                            value={todo.description}\r\n                            name=\"description\"\r\n                            variant=\"filled\"\r\n                            required\r\n                        />\r\n                          <TextField\r\n                            onChange={handleChange}\r\n                            color=\"secondary\"\r\n                            required\r\n                            id=\"standard-select-color\"\r\n                            select\r\n                            label=\"Color\"\r\n                            name=\"color\"\r\n                            value={todo.color}\r\n                            helperText=\"Select a color for your task\"\r\n                            >\r\n                            {colors.map((option) => (\r\n                                <MenuItem key={option.value} value={option.value}>\r\n                                    <Box display=\"flex\" justifyContent=\"space-between\" style={{width:\"100%\"}}>\r\n                                        <Typography>{option.label}</Typography> \r\n                                        <Box className=\"colorPrev\" style={{backgroundColor:option.value}}></Box>\r\n                                    </Box>\r\n                                </MenuItem>\r\n                            ))}\r\n                            </TextField>\r\n                    </Box>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Grid container display=\"flex\" justify=\"space-between\" alignItems=\"baseline\" >\r\n                        <Box>\r\n                            <Button onClick={handleSubmit} size=\"small\"><Typography className=\"buttonFont\" >Save</Typography></Button>\r\n                            <Button onClick={handleCancel} size=\"small\"><Typography className=\"buttonFont\" >Cancel</Typography></Button>\r\n                        </Box>\r\n                        <Box>\r\n                             <IconButton onClick={() => props.closeTodoForm(false)}>\r\n                                <Icon className=\"iconStyle\">close</Icon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    </Grid>\r\n                </CardActions>\r\n            </Card>\r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoForm","import * as todoActions from './todoActions'\r\n\r\nconst actions = {todoActions}\r\n\r\n\r\nexport default actions","import  '../actions' \r\nimport actions from '../actions'\r\n\r\nexport const initialState = {\r\n\r\n    todos: [],\r\n\r\n    currentTodo : {title:'',description:'',color:\"\"},\r\n\r\n    alert: {message :\"\", severity:\"\"},\r\n\r\n    loading:false\r\n}\r\n\r\nexport const todoReducer = (state = initialState,action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case actions.todoActions.ADD_TODO:\r\n            return {...state,\r\n                todos:[...state.todos,action.payload]}\r\n        \r\n        case actions.todoActions.GET_TODOS:\r\n            return {...state,\r\n                todos:state.todos.concat(action.payload)}\r\n\r\n        case actions.todoActions.DELETE_TODO:\r\n            return {...state,\r\n                todos: state.todos.filter(todo => todo._id !== action.payload)}\r\n\r\n        case actions.todoActions.UPDATE_TODO:\r\n            return{...state,\r\n                todos: state.todos.map(todo => todo._id === action.payload._id ? action.payload : todo)}\r\n\r\n        case actions.todoActions.CURRENT_TODO:\r\n            return {...state,\r\n                currentTodo:action.payload}\r\n        \r\n        case actions.todoActions.SET_ALERT:\r\n            return {...state,alert:action.payload}\r\n        \r\n        case actions.todoActions.SET_LOADING:\r\n            return{...state,loading:action.payload}\r\n\r\n        default: \r\n        return state\r\n    };\r\n}\r\n\r\n\r\n","import React,{useEffect,useState} from 'react'\r\nimport {Grid,IconButton,Typography,Tooltip,Box,Paper,Accordion,AccordionSummary,AccordionDetails,Button} from '@material-ui/core'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {fetchTodo,deleteTodoById,getTodoById,selectTodo} from '../store/actions/todoActions'\r\nimport {initialState} from '../store/reducers/todoReducer'\r\n//// IMPORT ALL CONST & AND UTILS FUNCTIONS FROM \"utils.js\" files /////\r\nimport {deleteInfoMessage,clearTodoListMessage} from '../utils'\r\n\r\nconst TodoList = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const todos = useSelector(state => state.todos.todos)\r\n\r\n    const currentTodo = useSelector(state => state.todos.currentTodo)\r\n\r\n    const isLoading = useSelector(state => state.todos.loading)\r\n    \r\n    const [expanded,setExpand] = useState(false)\r\n\r\n    /// fetch the API to call todos array ///\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(fetchTodo())\r\n        \r\n    },[dispatch])\r\n\r\n    const handleToggleAccordion = (panel) => (event,isExpanded) => {\r\n\r\n        setExpand(isExpanded ? panel : false)\r\n    }\r\n\r\n\r\n    const handleDelete = (id) => {\r\n\r\n        if(currentTodo._id === id){ dispatch(selectTodo(initialState.currentTodo))}\r\n        \r\n        dispatch(deleteTodoById(id,deleteInfoMessage))\r\n\r\n        props.openTodoForm(false)\r\n\r\n        setExpand(false)\r\n    }\r\n\r\n    const handleEditTodo =  (id) => {\r\n\r\n        const editModeForm = \"Edit\"\r\n\r\n        dispatch(getTodoById(id))\r\n\r\n        props.handleModeForm(editModeForm)\r\n\r\n        props.openTodoForm(true)\r\n\r\n        setExpand(false)\r\n    }\r\n\r\n    //// delete all Todos with a Loop ///////\r\n\r\n    const deleteAllTodo = () => {\r\n\r\n        todos.forEach(todo => dispatch(deleteTodoById(todo._id,clearTodoListMessage)))\r\n    }\r\n\r\n    return( \r\n        <Grid item md={8} >\r\n\r\n            {!isLoading ?\r\n\r\n           (todos.length >= 0 && <Paper >\r\n\r\n            {todos.map((todo,index) =>\r\n\r\n                <Accordion style={{backgroundColor:todo.color}} expanded={expanded === index} onChange={handleToggleAccordion(index)} key={index} >\r\n                    <AccordionSummary\r\n                    expandIcon={<Icon>expand_more</Icon>}\r\n                    >\r\n                        <Typography>{todo.title}</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                            <Box>\r\n                                <Typography component=\"p\" variant=\"body2\">{todo.description}</Typography>\r\n                            </Box>\r\n                            <Box>\r\n                                <Tooltip title=\"edit your task\">\r\n                                    <IconButton onClick={()=> handleEditTodo(todo._id)} size=\"small\"><Icon className=\"iconStyle\" >edit</Icon></IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"delete your task\">\r\n                                    <IconButton size=\"small\" onClick={() => handleDelete(todo._id)}><Icon className=\"iconStyle\">delete_forever</Icon></IconButton>\r\n                                </Tooltip>\r\n                            </Box>\r\n                        </Grid>\r\n                    </AccordionDetails>\r\n                </Accordion>    \r\n            )}\r\n        </Paper>) : (null)}\r\n\r\n        {!isLoading ? ( todos.length > 0 &&\r\n            <Box  display=\"flex\" justifyContent=\"center\" >\r\n                <Button onClick={deleteAllTodo} size=\"large\" startIcon={<Icon  className=\"iconStyle\">delete_outlined</Icon>}>\r\n                    <Typography  className=\"buttonFont\" >Clear ToDo List</Typography>\r\n                </Button>\r\n            </Box>):(null)}\r\n        </Grid>\r\n        \r\n    )\r\n}\r\n\r\nexport default TodoList","import React from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport {initialState} from '../store/reducers/todoReducer'\r\nimport {setAlert} from '../store/actions/todoActions'\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\n\r\nconst AlertMessage = () => {\r\n\r\n  const alert = useSelector(state => state.todos.alert)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const clearAlert = () => dispatch(setAlert(initialState.alert))\r\n\r\n  const RenderAlert = () => {\r\n\r\n    if(alert.message !== \"\"){\r\n\r\n      setTimeout(() => {\r\n\r\n        clearAlert()\r\n        \r\n      }, 3000);\r\n\r\n      return(\r\n        <Alert variant=\"filled\" severity={alert.severity}>\r\n          {alert.message}\r\n        </Alert>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      {RenderAlert()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AlertMessage","import React,{useState} from 'react'\r\n//// IMPORT COMPONENTS //////\r\nimport TodoForm from './TodoForm'\r\nimport TodoList from './TodoList'\r\nimport AlertMessage from './Alert'\r\n//// IMPORT COMPONENTS FROM FRAMEWORK UI ////////\r\nimport {Grid,Typography,Button,Box} from '@material-ui/core'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport {useDispatch} from 'react-redux'\r\nimport {selectTodo} from '../store/actions/todoActions'\r\nimport {initialState} from '../store/reducers/todoReducer'\r\n\r\n\r\nconst TodoHeader = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const createModeForm = \"Create\";\r\n\r\n    const [toggleTodoForm,setToggleTodoForm] = useState(false)\r\n\r\n    const [modeForm,setFormMode] = useState(createModeForm)\r\n\r\n    /// pure function to open/close the todo Form /////\r\n    const handleToggleTodoForm = (val) => setToggleTodoForm(val)\r\n\r\n    //// pure function to determine if the form component is in Edit or Create Mode //////////\r\n    const handleModeForm = (val) => setFormMode(val)\r\n\r\n    ///// function to populate  todo form //////\r\n    const handleFormState = (stateForm,modeFormName) => {\r\n\r\n        dispatch(selectTodo(stateForm))\r\n        handleModeForm(modeFormName)\r\n        handleToggleTodoForm(true)\r\n    }\r\n    \r\n    return( \r\n\r\n      <Grid container justify=\"flex-end\">\r\n       \r\n        <Grid item md={7}>\r\n            <Grid container  justify=\"center\" direction=\"column\" alignItems=\"center\">\r\n                <Box justify=\"center\">\r\n                    <Typography variant=\"h2\" className=\"title\">ToDo</Typography>\r\n                </Box>\r\n                <Box justify=\"center\">\r\n                    <Typography variant=\"h5\" className=\"subTitle\">Your daily task app !</Typography>\r\n                </Box>\r\n                <Box onClick={() => handleFormState(initialState.currentTodo,createModeForm)} mt={1}>\r\n                    <Button size=\"large\" startIcon={<Icon  className=\"iconStyle\">add_circle_outline</Icon>}>\r\n                        <Typography  className=\"buttonFont\" >add a new task</Typography>\r\n                    </Button>\r\n                </Box>\r\n            </Grid>\r\n            <Grid  container  justify=\"center\">\r\n                <TodoList handleModeForm={handleModeForm} openTodoForm={handleToggleTodoForm}/>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item md={3}> \r\n           {toggleTodoForm && <TodoForm modeForm={modeForm} closeTodoForm={handleToggleTodoForm}/>} \r\n           <Box mt={7} mr={2}>\r\n                <AlertMessage/>\r\n            </Box>\r\n        </Grid>\r\n    </Grid>\r\n        \r\n    )\r\n}\r\n\r\nexport default TodoHeader","import React from 'react'\r\nimport {Grid} from '@material-ui/core'\r\nimport TodoHeader from './components/TodoHeader'\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport {deleteTodoById} from './store/actions/todoActions'\r\nimport {initialState} from './store/reducers/todoReducer'\r\n\r\nfunction App() {  \r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const todos = useSelector(state => state.todos.todos)\r\n\r\n  //// CLEAR TODO LIST WHEN SESSION IS OVER /////\r\n  \r\n  React.useEffect(() => {\r\n\r\n    if(!window.sessionStorage.getItem('open')){\r\n     \r\n      todos.forEach(todo => { dispatch(deleteTodoById(todo._id,initialState.alert))});\r\n    }\r\n      \r\n  },[dispatch,todos])\r\n\r\n  return (\r\n    <Grid container className=\"backGround\" justify=\"center\">\r\n        <Grid item md={12}>\r\n            <Grid container justify=\"center\">\r\n              <TodoHeader/>\r\n            </Grid>\r\n        </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers} from 'redux'\r\nimport {todoReducer} from './todoReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\r\n    todos : todoReducer\r\n})\r\n\r\n    \r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore,applyMiddleware} from 'redux'\r\nimport {Provider} from 'react-redux'\r\nimport thunk from \"redux-thunk\"\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport './index.css';\r\n//   LOCAL IMPORTS   ///\r\nimport App from './App';\r\nimport rootReducer from './store/reducers'\r\n\r\nconst store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunk)))\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}