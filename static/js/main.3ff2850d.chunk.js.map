{"version":3,"sources":["store/actions/todoActions.js","utils.js","components/TodoForm.js","store/actions/index.js","store/reducers/todoReducer.js","components/TodoList.js","components/Alert.js","components/TodoHeader.js","App.js","store/reducers/index.js","index.js"],"names":["GET_TODOS","CURRENT_TODO","ADD_TODO","DELETE_TODO","SET_ALERT","UPDATE_TODO","getTodos","todos","type","payload","selectTodo","todo","addTodo","deleteTodo","id","updateTodo","setAlert","alert","fetchTodo","dispatch","a","axios","get","response","data","console","log","getTodoById","url","result","postTodo","message","post","deleteTodoById","delete","patchTodo","_id","patch","colors","value","label","deleteInfoMessage","severity","clearTodoListMessage","addSuccessAlert","errorAlert","updateSuccessAlert","TodoForm","props","useDispatch","currentTodo","useSelector","state","useState","setTodo","modeForm","modeFormName","setModeFormName","React","useEffect","handleChange","e","target","name","Box","mt","width","Card","className","elevation","CardContent","Typography","variant","display","flexDirection","TextField","onChange","color","margin","title","required","multiline","rows","description","select","helperText","map","option","MenuItem","justifyContent","style","backgroundColor","CardActions","Grid","container","justify","alignItems","Button","onClick","closeTodoForm","size","IconButton","Icon","actions","todoActions","initialState","TodoList","expanded","setExpand","visibility","setVisibility","setTimeout","item","md","length","Paper","index","Accordion","panel","event","isExpanded","AccordionSummary","expandIcon","AccordionDetails","component","Tooltip","handleModeForm","openTodoForm","forEach","startIcon","AlertMessage","Alert","TodoHeader","createModeForm","toggleTodoForm","setToggleTodoForm","setFormMode","handleToggleTodoForm","val","direction","mr","App","entries","performance","getEntriesByType","checkRefreshBrowser","entrie","rootReducer","combineReducers","action","concat","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ff2850d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const GET_TODOS = \"GET_TODOS\"\r\nexport const CURRENT_TODO = \"CURRENT_TODO\"\r\nexport const ADD_TODO = \"ADD_TODO\"\r\nexport const DELETE_TODO = \"DELETE_TODO\"\r\nexport const SET_ALERT = \"SET_ALERT\"\r\nexport const UPDATE_TODO = \"UPDATE_TODO\"\r\n\r\n\r\nexport const getTodos = (todos) => ({\r\n\r\n    type: GET_TODOS,\r\n    payload:todos\r\n})\r\n\r\nexport const selectTodo = (todo) => ({\r\n\r\n    type : CURRENT_TODO,\r\n    payload:todo\r\n})\r\n\r\nexport const addTodo = (todo) => ({\r\n\r\n    type:ADD_TODO,\r\n    payload:todo\r\n});\r\n\r\nexport const deleteTodo = (id) => ({\r\n\r\n    type:DELETE_TODO,\r\n    payload:id\r\n});\r\n\r\nexport const updateTodo = (todo) => ({\r\n\r\n    type:UPDATE_TODO,\r\n    payload:todo\r\n});\r\n\r\nexport const setAlert = (alert) => ({\r\n\r\n    type:SET_ALERT,\r\n    payload:alert\r\n});\r\n\r\nexport const fetchTodo = () => {\r\n\r\n    const url = \"https://todo.eachbase.com/api/RaffiHaycan/todos\"\r\n\r\n\r\n    return async dispatch => {\r\n\r\n        try {\r\n\r\n            const response = await axios.get(url)\r\n\r\n            const data = await response.data\r\n\r\n            dispatch(getTodos(data))\r\n\r\n        } catch (error) {console.log(error)}\r\n    }\r\n}\r\n\r\nexport const getTodoById = (payload) => async dispatch => {\r\n\r\n   const url =  `https://todo.eachbase.com/api/RaffiHaycan/todos/${payload}`\r\n\r\n    try {\r\n\r\n        const response = await axios.get(url)\r\n\r\n        const result =  await response.data\r\n\r\n        dispatch(selectTodo(result))\r\n        \r\n    } catch (error) {console.log(error) }\r\n\r\n}\r\n\r\nexport const postTodo = (payload,message) => async dispatch => {\r\n\r\n    const url = \"https://todo.eachbase.com/api/RaffiHaycan/todos\"\r\n\r\n    try {\r\n\r\n       const response =  await axios.post(url,payload)\r\n\r\n       const result =  await response.data\r\n\r\n       dispatch(addTodo(result))\r\n       dispatch(setAlert(message))\r\n\r\n    } catch (error) {console.log(error)}\r\n\r\n}\r\n\r\nexport const deleteTodoById = (payload,message) => async dispatch => {\r\n\r\n    const url = \"https://todo.eachbase.com/api/RaffiHaycan/todos/\" + payload;\r\n\r\n    try {\r\n        await axios.delete(url,{data:payload})\r\n\r\n        dispatch(deleteTodo(payload))\r\n        dispatch(setAlert(message))\r\n\r\n    } catch (error) {console.log(error)}\r\n}\r\n\r\nexport const patchTodo = (payload,message) => async dispatch => {\r\n\r\n    const url = \"https://todo.eachbase.com/api/RaffiHaycan/todos/\" + payload._id;\r\n\r\n    try {\r\n\r\n        const response = await axios.patch(url,payload)\r\n\r\n        const result = await response.data\r\n\r\n        dispatch(updateTodo(result))\r\n        dispatch(setAlert(message))\r\n\r\n    } catch (error) {console.log(error)}\r\n}\r\n\r\n","\r\nexport const colors = [\r\n    {\r\n      value: '#fbc25d',\r\n      label: 'orange',\r\n    },\r\n    {\r\n      value: '#fb5d5d',\r\n      label: 'fushia',\r\n    },\r\n    {\r\n      value: '#93fb5d',\r\n      label: 'green',\r\n    },\r\n    {\r\n      value: '#5da0fb',\r\n      label: 'blue',\r\n    },\r\n    {\r\n        value: '#dc5dfb',\r\n        label: 'purple',\r\n    },\r\n    {\r\n        value: '#b3c785',\r\n        label: 'beige',\r\n    }\r\n];\r\n\r\n\r\nexport const deleteInfoMessage = {message:\"task deleted with success\", severity:\"info\"}\r\n\r\nexport const clearTodoListMessage = {message:\"Todo list is cleaned up\", severity:\"info\"}\r\n\r\nexport const addSuccessAlert = {message:\"New task added with success !\", severity:\"success\"}\r\n\r\nexport const errorAlert = {message:\"Field is blank, please fill out it\",severity:\"error\"}\r\n\r\nexport const updateSuccessAlert = {message:\" task updated with success !\", severity:\"success\"}","import React,{useState} from 'react'\r\nimport {Card, CardContent,Typography,CardActions,Button,Box,TextField,IconButton,Grid,MenuItem} from '@material-ui/core'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {patchTodo, postTodo,setAlert} from '../store/actions/todoActions'\r\nimport {addSuccessAlert,updateSuccessAlert,errorAlert} from '../utils'\r\nimport {colors} from '../utils'\r\nimport Icon from '@material-ui/core/Icon'\r\n\r\n\r\nconst TodoForm = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const currentTodo = useSelector(state => state.todos.currentTodo)\r\n\r\n    const [todo,setTodo] = useState(currentTodo)\r\n\r\n    const [modeFormName,setModeFormName] = useState(props.modeForm)\r\n\r\n\r\n    React.useEffect(() => {\r\n\r\n        setTodo(currentTodo)\r\n\r\n        setModeFormName(props.modeForm)\r\n\r\n    },[setTodo,currentTodo,setModeFormName,props.modeForm])\r\n\r\n    const handleChange = (e) => {\r\n\r\n        const {value,name} = e.target\r\n\r\n        setTodo({...todo,[name]:value})\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n\r\n        if(todo.title === \"\" || todo.description === \"\" || todo.color === \"\"){\r\n\r\n            dispatch(setAlert(errorAlert))\r\n\r\n        } else {\r\n            \r\n            modeFormName === \"Create\" ?  dispatch(postTodo(todo,addSuccessAlert)) : dispatch(patchTodo(todo,updateSuccessAlert))\r\n           \r\n            props.closeTodoForm()\r\n        }\r\n    }\r\n\r\n    const handleCancel = () => setTodo(currentTodo)\r\n\r\n    return(\r\n\r\n        <Box mt={2} width=\"90%\">\r\n            <Card className=\"backGroundCard\" elevation={4}>\r\n                <CardContent>\r\n                    <Box>\r\n                        <Typography variant=\"h4\" className=\"subTitle1\" >{modeFormName} your task</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" flexDirection=\"column\">\r\n                        <TextField \r\n                            onChange={handleChange}\r\n                            color=\"secondary\" \r\n                            margin=\"dense\" \r\n                            label=\"Title\"\r\n                            name=\"title\"\r\n                            value={todo.title}\r\n                            required\r\n                            />\r\n                        <TextField\r\n                            onChange={handleChange}\r\n                            color=\"secondary\"\r\n                            id=\"filled-multiline-static\"\r\n                            label=\"Description\"\r\n                            multiline\r\n                            rows={1}\r\n                            value={todo.description}\r\n                            name=\"description\"\r\n                            variant=\"filled\"\r\n                            required\r\n                        />\r\n                          <TextField\r\n                            onChange={handleChange}\r\n                            required\r\n                            id=\"standard-select-color\"\r\n                            select\r\n                            label=\"Select\"\r\n                            name=\"color\"\r\n                            value={todo.color}\r\n                            helperText=\"Select a color for your task\"\r\n                            >\r\n                            {colors.map((option) => (\r\n                                <MenuItem key={option.value} value={option.value}>\r\n                                    <Box display=\"flex\" justifyContent=\"space-between\" style={{width:\"100%\"}}>\r\n                                        <Typography>{option.label}</Typography> \r\n                                        <Box className=\"colorPrev\" style={{backgroundColor:option.value}}></Box>\r\n                                    </Box>\r\n                                </MenuItem>\r\n                            ))}\r\n                            </TextField>\r\n                    </Box>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Grid container display=\"flex\" justify=\"space-between\" alignItems=\"baseline\" >\r\n                        <Box>\r\n                            <Button onClick={handleSubmit} size=\"small\"><Typography className=\"buttonFont\" >Save</Typography></Button>\r\n                            <Button onClick={handleCancel} size=\"small\"><Typography className=\"buttonFont\" >Cancel</Typography></Button>\r\n                        </Box>\r\n                        <Box>\r\n                             <IconButton onClick={() => props.closeTodoForm(false)}>\r\n                                <Icon className=\"iconStyle\">close</Icon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    </Grid>\r\n                </CardActions>\r\n            </Card>\r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoForm","import * as todoActions from './todoActions'\r\n\r\nconst actions = {todoActions}\r\n\r\n\r\nexport default actions","import  '../actions' \r\nimport actions from '../actions'\r\n\r\nexport const initialState = {\r\n\r\n    todos: [],\r\n\r\n    currentTodo : {title:'',description:'',color:\"\"},\r\n\r\n    alert: {message :\"\", severity:\"\"}\r\n}\r\n\r\nexport const todoReducer = (state = initialState,action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case actions.todoActions.ADD_TODO:\r\n            return {...state,\r\n                todos:[...state.todos,action.payload]}\r\n        \r\n        case actions.todoActions.GET_TODOS:\r\n            return {...state,\r\n                todos:state.todos.concat(action.payload)}\r\n\r\n        case actions.todoActions.DELETE_TODO:\r\n            return {...state,\r\n                todos: state.todos.filter(todo => todo._id !== action.payload)}\r\n\r\n        case actions.todoActions.UPDATE_TODO:\r\n            return{...state,\r\n                todos: state.todos.map(todo => todo._id === action.payload._id ? action.payload : todo)}\r\n\r\n        case actions.todoActions.CURRENT_TODO:\r\n            return {...state,\r\n                currentTodo:action.payload}\r\n        \r\n        case actions.todoActions.SET_ALERT:\r\n            return {...state,alert:action.payload}\r\n\r\n        default: \r\n        return state\r\n    };\r\n}\r\n\r\n\r\n","import React,{useEffect,useState} from 'react'\r\nimport {Grid,IconButton,Typography,Tooltip,Box,Paper,Accordion,AccordionSummary,AccordionDetails,Button} from '@material-ui/core'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {fetchTodo,deleteTodoById,getTodoById,selectTodo} from '../store/actions/todoActions'\r\nimport {initialState} from '../store/reducers/todoReducer'\r\nimport {deleteInfoMessage,clearTodoListMessage} from '../utils'\r\n\r\nconst TodoList = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const todos = useSelector(state => state.todos.todos)\r\n\r\n    const currentTodo = useSelector(state => state.todos.currentTodo)\r\n    \r\n    const [expanded,setExpand] = useState(false)\r\n\r\n    const [visibility,setVisibility] = useState(\"hidden\")\r\n\r\n    setTimeout(() => {\r\n\r\n        setVisibility(\"visible\")\r\n        \r\n    }, 1500);\r\n\r\n    useEffect(() => {\r\n       \r\n        dispatch(fetchTodo())\r\n    \r\n    },[dispatch])\r\n\r\n    const handleToggleAccordion = (panel) => (event,isExpanded) => {\r\n\r\n        setExpand(isExpanded ? panel : false)\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n\r\n        if(currentTodo._id === id){ dispatch(selectTodo(initialState.currentTodo))}\r\n        \r\n        dispatch(deleteTodoById(id,deleteInfoMessage))\r\n\r\n        props.openTodoForm(false)\r\n\r\n        setExpand(false)\r\n    }\r\n\r\n    const handleEditTodo =  (id) => {\r\n\r\n        const editModeForm = \"Edit\"\r\n\r\n        dispatch(getTodoById(id))\r\n\r\n        props.handleModeForm(editModeForm)\r\n\r\n        props.openTodoForm(true)\r\n\r\n        setExpand(false)\r\n    }\r\n\r\n    const deleteAllTodo = () => {\r\n\r\n        todos.forEach(todo => dispatch(deleteTodoById(todo._id,clearTodoListMessage)))\r\n    }\r\n\r\n    return( \r\n        <Grid item md={8} >\r\n\r\n           {todos.length >= 0 && <Paper style={{visibility:visibility}}>\r\n\r\n            {todos.map((todo,index) =>\r\n\r\n                <Accordion style={{backgroundColor:todo.color}} expanded={expanded === index} onChange={handleToggleAccordion(index)} key={index} >\r\n                    <AccordionSummary\r\n                    expandIcon={<Icon>expand_more</Icon>}\r\n                    >\r\n                        <Typography>{todo.title}</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                            <Box>\r\n                                <Typography component=\"p\" variant=\"body2\">{todo.description}</Typography>\r\n                            </Box>\r\n                            <Box>\r\n                                <Tooltip title=\"edit your task\">\r\n                                    <IconButton onClick={()=> handleEditTodo(todo._id)} size=\"small\"><Icon className=\"iconStyle\" >edit</Icon></IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"delete your task\">\r\n                                    <IconButton size=\"small\" onClick={() => handleDelete(todo._id)}><Icon className=\"iconStyle\">delete_forever</Icon></IconButton>\r\n                                </Tooltip>\r\n                            </Box>\r\n                        </Grid>\r\n                    </AccordionDetails>\r\n                </Accordion>    \r\n            )}\r\n        </Paper>}\r\n        {todos.length > 0 &&\r\n            <Box style={{visibility:visibility}}  display=\"flex\" justifyContent=\"center\">\r\n                <Button onClick={deleteAllTodo} size=\"large\" startIcon={<Icon  className=\"iconStyle\">delete_outlined</Icon>}>\r\n                    <Typography  className=\"buttonFont\" >Clear ToDo List</Typography>\r\n                </Button>\r\n            </Box>\r\n        }\r\n        </Grid>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default TodoList","import React from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport {initialState} from '../store/reducers/todoReducer'\r\nimport {setAlert} from '../store/actions/todoActions'\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\n\r\nconst AlertMessage = () => {\r\n\r\n  const alert = useSelector(state => state.todos.alert)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const clearAlert = () => dispatch(setAlert(initialState.alert))\r\n\r\n  const RenderAlert = () => {\r\n\r\n    if(alert.message !== \"\"){\r\n\r\n      setTimeout(() => {\r\n\r\n        clearAlert()\r\n        \r\n      }, 3000);\r\n\r\n      return(\r\n        <Alert variant=\"filled\" severity={alert.severity}>\r\n          {alert.message}\r\n        </Alert>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      {RenderAlert()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AlertMessage","import React,{useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {Grid,Typography,Button,Box} from '@material-ui/core'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport TodoList from './TodoList'\r\nimport {useDispatch} from 'react-redux'\r\nimport {selectTodo} from '../store/actions/todoActions'\r\nimport {initialState} from '../store/reducers/todoReducer'\r\nimport AlertMessage from './Alert'\r\n\r\n\r\nconst TodoHeader = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const createModeForm = \"Create\";\r\n\r\n    const [toggleTodoForm,setToggleTodoForm] = useState(false)\r\n    const [modeForm,setFormMode] = useState(createModeForm)\r\n\r\n    const handleToggleTodoForm = (val) => setToggleTodoForm(val)\r\n\r\n    const handleModeForm = (val) => setFormMode(val)\r\n\r\n    const handleFormState = (stateForm,modeFormName) => {\r\n\r\n        dispatch(selectTodo(stateForm))\r\n        handleModeForm(modeFormName)\r\n        handleToggleTodoForm(true)\r\n    }\r\n    \r\n    return( \r\n\r\n      <Grid container justify=\"flex-end\">\r\n       \r\n        <Grid item md={7}>\r\n            <Grid container  justify=\"center\" direction=\"column\" alignItems=\"center\">\r\n                <Box justify=\"center\">\r\n                    <Typography variant=\"h2\" className=\"title\">ToDo</Typography>\r\n                </Box>\r\n                <Box justify=\"center\">\r\n                    <Typography variant=\"h5\" className=\"subTitle\">your daily task app !</Typography>\r\n                </Box>\r\n                <Box onClick={() => handleFormState(initialState.currentTodo,createModeForm)} mt={1}>\r\n                    <Button size=\"large\" startIcon={<Icon  className=\"iconStyle\">add_circle_outline</Icon>}>\r\n                        <Typography  className=\"buttonFont\" >add a new task</Typography>\r\n                    </Button>\r\n                </Box>\r\n            </Grid>\r\n            <Grid  container  justify=\"center\">\r\n                <TodoList handleModeForm={handleModeForm} openTodoForm={handleToggleTodoForm}/>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item md={3}> \r\n           {toggleTodoForm && <TodoForm modeForm={modeForm} closeTodoForm={handleToggleTodoForm}/>} \r\n           <Box mt={7} mr={2}>\r\n                <AlertMessage/>\r\n            </Box>\r\n        </Grid>\r\n    </Grid>\r\n        \r\n    )\r\n}\r\n\r\nexport default TodoHeader","import React from 'react'\nimport {Grid} from '@material-ui/core'\nimport TodoHeader from './components/TodoHeader'\nimport {useSelector,useDispatch} from 'react-redux'\nimport {deleteTodoById} from './store/actions/todoActions'\nimport {initialState} from './store/reducers/todoReducer'\n\nfunction App() {  \n\n  const entries = performance.getEntriesByType(\"navigation\");\n\n  const dispatch = useDispatch()\n\n  const todos = useSelector(state => state.todos.todos)\n\n  const deleteAlltodo = () => {\n\n    todos.forEach(todo => {\n      \n      dispatch(deleteTodoById(todo._id,initialState.alert))\n    });\n  }\n\n  const checkRefreshBrowser = () => {\n\n    entries.map(entrie => \n      \n    entrie.type === \"reload\" ? console.log(entrie.type) : deleteAlltodo())\n  \n  }\n\n  React.useEffect(() => {\n\n    checkRefreshBrowser(entries)\n\n  },[entries])\n\n\n\n  return (\n    <Grid container className=\"backGround\" justify=\"center\">\n        <Grid item md={12}>\n            <Grid container justify=\"center\">\n              <TodoHeader/>\n            </Grid>\n        </Grid>\n    </Grid>\n  )\n}\n\nexport default App;\n","import {combineReducers} from 'redux'\r\nimport {todoReducer} from './todoReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\r\n    todos : todoReducer\r\n})\r\n\r\n    \r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore,applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport thunk from \"redux-thunk\"\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport './index.css';\n//   LOCAL IMPORTS   ///\nimport App from './App';\nimport rootReducer from './store/reducers'\n\nconst store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunk)))\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}